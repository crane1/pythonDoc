Python教程

Python是一门易学却强大的编程语言。Python拥有高效的高级数据结构，简单却有效的访问面向对象的程序。Python拥有优雅的语法、动态类型以及自然的解释，使它成为一门完美的脚本语言，并在许多平台和领域里进行快速的开发。

Python解释器和庞大的标准库可用于所有主要的平台，并可以源码或二进制的形式自由的从Python Web站点https://www.python.org/获取，可自由发布。相同的站点也包含许多免费的第三方模块、程序、工具和其他文档的发布版和链接。

Python解释器可以使用C或C++实现的新函数和数据类型去扩展。Python也适用于作为定制程序的一种扩展语言。

此教程向读者通俗的介绍了Python语言和系统的基础概念和特性。拥有一个Python解释器有助于动手操作，不过所有的例子都是独立的，所以也可以在线阅读。

标准对象和模块可以看Python标准库。Python语言参考给出了更正式的语言定义。要使用C或C++写扩展，请阅读Python解释器的扩展和嵌入，Python/C API参考手册。也有几本数覆盖了Python的深层内容。

此教程不会尝试覆盖和解释每一个单独或通用的特性。而是解释Python最值的注意的特性，并对语言风格给出好的建议。阅读之后，你将能够阅读和编写Python模块和程序，你也将准备学习更多的Python的各种库模块，它们都用标准库描述。

词汇表也值的去看一下。

    1.开胃菜
    2.使用Python解释器
        2.1.调用解释器
            2.1.2. 参数传递
	    2.1.2. 互动模式
	2.2. 解释器和环境
	    2.2.1. 源码编码
    3.一个正式的Python介绍
	3.1. 使用Python作计算器
	    3.1.1 数字
	    3.1.2 字符串
	    3.1.3 Unicode 字符串
            3.1.4 列表
        3.2. 走向编程的第一步
    4. 更多的控制流程工具
        4.1. if 语句
        4.2. for 语句
        4.3. range() 函数
        4.4. break、continue和else
        4.5. pass 语句
        4.6. 定义函数
        4.7. 更多的函数定义
            4.7.1. 默认参数值
            4.7.2. 关键字参数
            4.7.3. 任意参数列表
            4.7.4. 解包参数列表
            4.7.5. Lambda表达式
            4.7.6. 文档字符串
        4.8. 间奏曲：代码风格
    5. 数据结构
        5.1. 更多的列表
            5.1.1. 使用列表作栈
            5.1.2. 使用列表作队列
            5.1.3. 函数式编程工具
            5.1.4. 列表理解
                5.1.4.1. 嵌套列表理解
        5.2. del 语句
        5.3. 元组和序列
        5.4. 集合
        5.5. 字典
        5.6. 循环技术
        5.7. 更多条件
        5.8. 序列和其他类型的比较
    6. 模块
        6.1. 模块更多
            6.1.1. 执行模块和脚本
            6.1.2. 模块查找路径
            6.1.3. “编译Pyhon文件
        6.2. 标准模块
        6.3. dir()函数
        6.4. 包
            6.4.1. 从包里导入*
            6.4.2. 包内引用
            6.4.3. 多目录中的包
    7. 输入输出
        7.1. 更理想的输出格式
            7.1.1. 旧输出格式
        7.2. 读写文件
            7.2.1. 文件对象的方法
            7.2.2. 用json保存结构数据
    8. 错误和异常
        8.1. 语法错误
        8.2. 异常
        8.3. 处理异常
        8.4. 抛出异常
        8.5. 自定义异常
        8.6. 定义清理动作
        8.7. 预定义清理动作
    9. 类
        9.1. 关于名字和对象的一句话
        9.2. Python作用域和命名空间
        9.3. 初次见类
            9.3.1. 类定义语法
            9.3.2. 类对象
            9.3.3. 实例对象
            9.3.4. 方法对象
            9.3.5. 类和实例变量
        9.4. 随机注释
        9.5. 继承
            9.5.1. 多继承
        9.6. 私有变量和类的局部引用
        9.7. 零星杂物
        9.8. 异常也是类
        9.9. 遍历器
        9.10. 生成器
        9.11. 生成器表达式
    10. 标准库简介
        10.1. 操作系统接口
        10.2. 文件统配符
        10.3. 命令行参数
        10.4. 错误输出重定向和程序终止
        10.5. 字符串模式匹配
        10.6. 数学
        10.7. 网络访问
        10.8. 日期和时间
        10.9. 数据和压缩
        10.10. 性能测量
        10.11. 质量控制
        10.12. 电池包括
    11. 标准库简介2
        11.1. 输出格式
        11.2. 模板
        11.3. 使用二进制数据记录布局
        11.4. 多线程
        11.5. 日志
        11.6. 弱引用
        11.7. 列表的工具
        11.8. 十进制浮点运算
    12. 现在做什么？
    13. 交互式输入编辑与历史替代
        13.1. 行编辑
        13.2. 历史替代
        13.3. 关键字绑定
        13.4. 交互式解释器的替代方案
    14. 浮点运算：问题和局限
        14.1. 表示错误
    15. 附录
        15.1. 互动模式
            15.1.1. 错误处理
            15.1.2. 执行Python脚本
            15.1.3. 交互启动文件
            15.1.4. 定制模块

